{
  "_args": [
    [
      {
        "raw": "unified@^5.0.0",
        "scope": null,
        "escapedName": "unified",
        "name": "unified",
        "rawSpec": "^5.0.0",
        "spec": ">=5.0.0 <6.0.0",
        "type": "range"
      },
      "/tmp/apm-install-dir-11748-31601-3yitav.rv57xbhuxr/node_modules/atom-beautify/node_modules/remark"
    ]
  ],
  "_from": "unified@>=5.0.0 <6.0.0",
  "_id": "unified@5.1.0",
  "_inCache": true,
  "_location": "/atom-beautify/unified",
  "_nodeVersion": "5.0.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/unified-5.1.0.tgz_1476130730412_0.27419051667675376"
  },
  "_npmUser": {
    "name": "wooorm",
    "email": "tituswormer@gmail.com"
  },
  "_npmVersion": "3.3.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "unified@^5.0.0",
    "scope": null,
    "escapedName": "unified",
    "name": "unified",
    "rawSpec": "^5.0.0",
    "spec": ">=5.0.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/atom-beautify/remark"
  ],
  "_resolved": "https://registry.npmjs.org/unified/-/unified-5.1.0.tgz",
  "_shasum": "61268da9b91ce925be1f3d198c0278b0e9716094",
  "_shrinkwrap": null,
  "_spec": "unified@^5.0.0",
  "_where": "/tmp/apm-install-dir-11748-31601-3yitav.rv57xbhuxr/node_modules/atom-beautify/node_modules/remark",
  "author": {
    "name": "Titus Wormer",
    "email": "tituswormer@gmail.com",
    "url": "http://wooorm.com"
  },
  "browser": {
    "node-extend": "extend"
  },
  "bugs": {
    "url": "https://github.com/wooorm/unified/issues"
  },
  "contributors": [
    {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "http://wooorm.com"
    }
  ],
  "dependencies": {
    "bail": "^1.0.0",
    "extend": "^3.0.0",
    "has": "^1.0.1",
    "is-buffer": "^1.1.4",
    "once": "^1.3.3",
    "trough": "^1.0.0",
    "vfile": "^2.0.0",
    "x-is-string": "^0.1.0"
  },
  "description": "Pluggable text processing interface",
  "devDependencies": {
    "browserify": "^13.0.0",
    "esmangle": "^1.0.0",
    "nyc": "^8.1.0",
    "remark-cli": "^2.0.0",
    "remark-preset-wooorm": "^1.0.0",
    "tape": "^4.4.0",
    "xo": "^0.16.0"
  },
  "directories": {},
  "dist": {
    "shasum": "61268da9b91ce925be1f3d198c0278b0e9716094",
    "tarball": "https://registry.npmjs.org/unified/-/unified-5.1.0.tgz"
  },
  "engines": {
    "node": ">=0.11.0"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "gitHead": "be921cdcd4d64b430a1c69e68bd964cbae4a2efa",
  "homepage": "https://github.com/wooorm/unified#readme",
  "keywords": [
    "process",
    "parse",
    "transform",
    "compile",
    "stringify",
    "hast",
    "retext",
    "remark"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "wooorm",
      "email": "tituswormer@gmail.com"
    }
  ],
  "name": "unified",
  "nyc": {
    "check-coverage": true,
    "lines": 100,
    "functions": 100,
    "branches": 100
  },
  "optionalDependencies": {},
  "readme": "# unified [![Build Status][travis-badge]][travis] [![Coverage Status][codecov-badge]][codecov]\n\n**unified** is an interface for processing text using syntax trees.\nIt’s what powers [**remark**][remark], [**retext**][retext], and\n[**rehype**][rehype], but it also allows for processing between\nmultiple syntaxes.\n\n## Installation\n\n[npm][npm-install]:\n\n```bash\nnpm install unified\n```\n\n**unified** is also available as an AMD, CommonJS, and globals module,\n[uncompressed and compressed][releases].\n\n## Usage\n\n```js\nvar unified = require('unified');\nvar markdown = require('remark-parse');\nvar toc = require('remark-toc');\nvar remark2rehype = require('remark-rehype');\nvar document = require('rehype-document');\nvar minify = require('rehype-preset-minify');\nvar html = require('rehype-stringify');\n\nprocess.stdin\n  .pipe(unified())\n  .use(markdown)\n  .use(toc)\n  .use(remark2rehype)\n  .use(document)\n  .use(minify)\n  .use(html)\n  .pipe(process.stdout);\n```\n\n## Table of Contents\n\n*   [Description](#description)\n*   [API](#api)\n    *   [processor()](#processor)\n    *   [processor.use(plugin\\[, options\\])](#processoruseplugin-options)\n    *   [processor.parse(file|value\\[, options\\])](#processorparsefilevalue-options)\n    *   [processor.stringify(node\\[, file\\]\\[, options\\])](#processorstringifynode-file-options)\n    *   [processor.run(node\\[, file\\]\\[, done\\])](#processorrunnode-file-done)\n    *   [processor.process(file|value\\[, options\\]\\[, done\\])](#processorprocessfilevalue-options-done)\n    *   [processor.write(chunk\\[, encoding\\]\\[, callback\\])](#processorwritechunk-encoding-callback)\n    *   [processor.end()](#processorend)\n    *   [processor.pipe(stream\\[, options\\])](#processorpipestream-options)\n    *   [processor.data(key\\[, value\\])](#processordatakey-value)\n    *   [processor.abstract()](#processorabstract)\n*   [License](#license)\n\n## Description\n\n**unified** is an interface for processing text using syntax trees.\nSyntax trees are a representation understandable to programs.\nThose programs, called [**plug-in**][plugin]s, take these trees and\nmodify them, amongst other things.  To get to the syntax tree from\ninput text, there’s a [**parser**][parser], and, to get from that\nback to text, there’s a [**compiler**][compiler].  This is the\n[**process**][process] of a **processor**.\n\n```ascii\n                     ┌──────────────┐\n                  ┌─ │ Transformers │ ─┐\n                  ▲  └──────────────┘  ▼\n                  └────────┐  ┌────────┘\n                           │  │\n            ┌────────┐     │  │     ┌──────────┐\n  Input ──▶ │ Parser │ ──▶ Tree ──▶ │ Compiler │ ──▶ Output\n            └────────┘              └──────────┘\n```\n\n###### Processors\n\nEvery processor implements another processor.  To create a new\nprocessor, invoke another processor.  This creates a processor that is\nconfigured to function the same as its ancestor.  But, when\nthe descendant processor is configured in the future, that\nconfiguration does not change the ancestral processor.\n\nOften, when processors are exposed from a library (for example,\nunified itself), they should not be modified directly, as that\nwould change their behaviour for all users.  Those processors are\n[**abstract**][abstract], and they should be made concrete before\nthey are used, by invoking them.\n\n###### Node\n\nThe syntax trees used in **unified** are [**Unist**][unist] nodes,\nwhich are plain JavaScript objects with a `type` property.  The\nsemantics of those `type`s are defined by other projects.\n\nThere are several [utilities][unist-utilities] for working with these\nnodes.\n\n###### List of Processors\n\nThe following projects process different syntax trees.  They parse\ntext to their respective syntax tree, and they compile their syntax\ntrees back to text.  These processors can be used as-is, or their\nparsers and compilers can be mixed and matched with other plug-ins\nto process between different syntaxes.\n\n*   [**rehype**][rehype] ([**HAST**][hast]) — HTML;\n*   [**remark**][remark] ([**MDAST**][mdast]) — Markdown;\n*   [**retext**][retext] ([**NLCST**][nlcst]) — Natural language.\n\n###### File\n\nWhen processing documents, metadata is often gathered about that\ndocument.  [**VFile**][vfile] is a virtual file format which stores\ndata, and handles metadata and messages for **unified** and its\nplug-ins.\n\nThere are several [utilities][vfile-utilities] for working with these\nfiles.\n\n###### Configuration\n\nTo configure a processor, invoke its [`use`][use] method, supply it a\n[**plug-in**][plugin], and optionally settings.\n\n###### Integrations\n\n**unified** can integrate with the file-system through\n[**unified-engine**][engine].  On top of that, CLI apps can be created\nwith [**unified-args**][args], Gulp plug-ins with\n[**unified-engine-gulp**][gulp], and Atom Linters with\n[**unified-engine-atom**][atom].\n\n###### Streaming\n\n**unified** provides a streaming interface which allows it to plug\ninto transformations outside of itself.  An example, which reads\nmarkdown as input, adds a table of content, and writes it out, would\nbe as follows:\n\n```js\nvar unified = require('unified');\nvar markdown = require('remark-parse');\nvar stringify = require('remark-stringify');\nvar toc = require('remark-toc');\n\nprocess.stdin\n  .pipe(unified())\n  .use(parse)\n  .use(toc)\n  .use(stringify)\n  .pipe(process.stdout);\n```\n\nWhich when given on **stdin**(4):\n\n```md\n# Alpha\n\n## Table of Content\n\n## Bravo\n```\n\nYields on **stdout**(4):\n\n```md\n# Alpha\n\n## Table of Content\n\n*   [Bravo](#bravo)\n\n## Bravo\n```\n\n###### Programming interface\n\nNext to streaming, there’s also a programming interface, which gives\naccess to processing metadata (such as lint messages), and supports\nmultiple passed through files:\n\n```js\nvar unified = require('unified');\nvar markdown = require('remark-parse');\nvar lint = require('remark-lint');\nvar remark2retext = require('remark-retext');\nvar english = require('retext-english');\nvar equality = require('retext-equality');\nvar remark2rehype = require('remark-rehype');\nvar html = require('rehype-stringify');\nvar report = require('vfile-reporter');\n\nunified()\n  .use(markdown)\n  .use(lint)\n  .use(remark2retext, unified().use(english).use(equality))\n  .use(remark2rehype)\n  .use(html)\n  .process('## Hey guys', function (err, file) {\n    console.err(report(err || file));\n    console.log(file.toString());\n  });\n```\n\nWhich yields:\n\n```txt\n   1:1-1:12  warning  First heading level should be `1`                                    first-heading-level\n   1:8-1:12  warning  `guys` may be insensitive, use `people`, `persons`, `folks` instead  gals-men\n\n⚠ 3 warnings\n<h2>Hey guys</h2>\n```\n\n###### Processing between syntaxes\n\nThe processors can be combined in two modes.\n\n**Bridge** mode transforms the syntax tree from one flavour (the origin)\nto another (the destination).  Then, transformations are applied on that\ntree.  Finally, the origin processor continues transforming the original\nsyntax tree.\n\n**Mutate** mode also transforms the syntax tree from one flavour to\nanother.  But then the origin processor continues transforming the\ndestination syntax tree.\n\nIn the previous example (“Programming interface”), `remark-retext` is\nused in bridge mode: the origin syntax tree is kept after retext is\nfinished; whereas `remark-rehype` is used in mutate mode: it sets a\nnew syntax tree and discards the original.\n\n*   [**remark-retext**][remark-retext].\n*   [**remark-rehype**][remark-rehype].\n*   [**rehype-retext**][rehype-retext].\n\n## API\n\n### `processor()`\n\nObject describing how to process text.\n\n###### Returns\n\n`Function` — A new [**concrete**][abstract] processor which is\nconfigured to function the same as its ancestor.  But, when the\ndescendant processor is configured in the future, that configuration\ndoes not change the ancestral processor.\n\n###### Example\n\nThe following example shows how a new processor can be created (from\nthe remark processor) and linked to **stdin**(4) and **stdout**(4).\n\n```js\nvar remark = require('remark');\n\nprocess.stdin.pipe(remark()).pipe(process.stdout);\n```\n\n### `processor.use(plugin[, options])`\n\nConfigure the processor to use a [**plug-in**][plugin], and configure\nthat plug-in with optional options.\n\n###### Signatures\n\n*   `processor.use(plugin[, options])`;\n*   `processor.use(plugins[, options])`;\n*   `processor.use(list)`;\n*   `processor.use(matrix)`;\n*   `processor.use(processor)`.\n\n###### Parameters\n\n*   `plugin` ([`Plugin`][plugin]);\n*   `options` (`*`, optional) — Configuration for `plugin`.\n*   `plugins` (`Array.<Function>`) — List of plugins;\n*   `list` (`Array`) — `plugin` and `options` in an array;\n*   `matrix` (`Array`) — Array where each entry is a `list`;\n*   `processor` ([`Processor`][processor]) — Other processor whose\n    plugins to use (except for a parser).\n\n###### Returns\n\n`processor` — The processor on which `use` is invoked.\n\n#### `Plugin`\n\nA **unified** plugin changes the way the applied-on processor works,\nin the following ways:\n\n*   It modifies the [**processor**][processor]: such as changing the\n    parser, the compiler, or linking the processor to other processors;\n*   It transforms the [**syntax tree**][node] representation of a file;\n*   It modifies metadata of a file.\n\nPlug-in’s are a concept which materialise as [**attacher**][attacher]s.\n\n#### `function attacher(processor[, options])`\n\nAn attacher is the thing passed to [`use`][use].  It configures the\nprocessor and in turn can receive options.\n\nAttachers can configure processors, such as by interacting with parsers\nand compilers, linking them to other processors, or by specifying how\nthe syntax tree is handled.\n\n###### Parameters\n\n*   `processor` ([`processor`][processor]) — Context on which it’s used;\n*   `options` (`*`, optional) — Configuration.\n\n###### Returns\n\n[`transformer`][transformer] — Optional.\n\n#### `function transformer(node, file[, next])`\n\nTransformers modify the syntax tree or metadata of a file.\nA transformer is a function which is invoked each time a file is\npassed through the transform phase.  If an error occurs (either\nbecause it’s thrown, returned, rejected, or passed to [`next`][next]),\nthe process stops.\n\nThe transformation process in **unified** is handled by [`trough`][trough],\nsee it’s documentation for the exact semantics of transformers.\n\n###### Parameters\n\n*   `node` ([**Node**][node]);\n*   `file` ([**VFile**][file]);\n*   `next` ([`Function`][next], optional).\n\n###### Returns\n\n*   `Error` — Can be returned to stop the process;\n*   [**Node**][node] — Can be returned and results in further\n    transformations and `stringify`s to be performed on the new\n    tree;\n*   `Promise` — If a promise is returned, the function is asynchronous,\n    and **must** be resolved (optionally with a [**Node**][node]) or\n    rejected (optionally with an `Error`).\n\n##### `function next(err[, tree[, file]])`\n\nIf the signature of a transformer includes `next` (third argument),\nthe function **may** finish asynchronous, and **must** invoke `next()`.\n\n###### Parameters\n\n*   `err` (`Error`, optional) — Stop the process;\n*   `node` ([**Node**][node], optional) — New syntax tree;\n*   `file` ([**VFile**][file], optional) — New virtual file.\n\n### `processor.parse(file|value[, options])`\n\nParse text to a syntax tree.\n\n###### Parameters\n\n*   `file` ([**VFile**][file]);\n    — Or anything which can be given to `vfile()`.\n*   `options` (`Object`, optional) — Configuration given to the parser.\n\n###### Returns\n\n[**Node**][node] — Syntax tree representation of input.\n\n#### `processor.Parser`\n\nConstructor handling the parsing of text to a syntax tree.\nIt’s instantiated by the [**parse**][parse] phase in the process\nwith a [**VFile**][file], `settings`, and the processor.\n\nThe instance must expose a `parse` method which is invoked without\narguments, and must return a syntax tree representation of the\n[**VFile**][file].\n\n### `processor.stringify(node[, file][, options])`\n\nCompile a syntax tree to text.\n\n###### Parameters\n\n*   `node` ([**Node**][node]);\n*   `file` ([**VFile**][file], optional);\n    — Or anything which can be given to `vfile()`.\n*   `options` (`Object`, optional) — Configuration given to the parser.\n\n###### Returns\n\n`string` — String representation of the syntax tree file.\n\n#### `processor.Compiler`\n\nConstructor handling the compilation of a syntax tree to text.\nIt’s instantiated by the [**stringify**][stringify] phase in the\nprocess with a [**VFile**][file], `settings`, and the processor.\n\nThe instance must expose a `compile` method which is invoked with\nthe syntax tree, and must return a string representation of that\nsyntax tree.\n\n### `processor.run(node[, file][, done])`\n\nTransform a syntax tree by applying [**plug-in**][plugin]s to it.\n\nIf asynchronous [**plug-in**][plugin]s are configured, an error\nis thrown if [`done`][run-done] is not supplied.\n\n###### Parameters\n\n*   `node` ([**Node**][node]);\n*   `file` ([**VFile**][file], optional);\n    — Or anything which can be given to `vfile()`.\n*   `done` ([`Function`][run-done], optional).\n\n###### Returns\n\n[**Node**][node] — The given syntax tree.\n\n##### `function done(err[, node, file])`\n\nInvoked when transformation is complete.  Either invoked with an\nerror, or a syntax tree and a file.\n\n###### Parameters\n\n*   `err` (`Error`) — Fatal error;\n*   `node` ([**Node**][node]);\n*   `file` ([**VFile**][file]).\n\n### `processor.process(file|value[, options][, done])`\n\nProcess the given representation of a file as configured on the\nprocessor.  The process invokes `parse`, `run`, and `stringify`\ninternally.\n\nIf asynchronous [**plug-in**][plugin]s are configured, an error\nis thrown if [`done`][process-done] is not supplied.\n\n###### Parameters\n\n*   `file` ([**VFile**][file]);\n*   `value` (`string`) — String representation of a file;\n*   `options` (`Object`, optional) — Configuration for both the parser\n    and compiler;\n*   `done` ([`Function`][process-done], optional).\n\n###### Returns\n\n[**VFile**][file] — Virtual file with modified [`contents`][vfile-contents].\n\n#### `function done(err, file)`\n\nInvoked when the process is complete.  Invoked with a fatal error, if\nany, and the [**VFile**][file].\n\n###### Parameters\n\n*   `err` (`Error`, optional) — Fatal error;\n*   `file` ([**VFile**][file]).\n\n### `processor.write(chunk[, encoding][, callback])`\n\n> **Note**: Although the interface is compatible with streams,\n> all data is currently buffered and passed through in one go.\n> This might be changed later.\n\nWrite data to the in-memory buffer.\n\n###### Parameters\n\n*   `chunk` ([`Buffer`][buffer] or `string`);\n*   `encoding` (`string`, defaults to `utf8`);\n*   `callback` (`Function`) — Invoked on successful write.\n\n###### Returns\n\n`boolean` — Whether the write was successful (currently, always true).\n\n### `processor.end()`\n\nSignal the writing is complete.  Passes all arguments to a final\n[`write`][write], and starts the process (using, when available,\noptions given to [`pipe`][pipe]).\n\n###### Events\n\n*   `data` (`string`)\n    — When the process was successful, triggered with the compiled\n    file;\n*   `error` (`Error`)\n    — When the process was unsuccessful, triggered with the fatal\n    error;\n*   `warning` ([`VFileMessage`][vfilemessage])\n    — Each message created by the plug-ins in the process is triggered\n    and separately passed.\n\n###### Returns\n\n`boolean` — Whether the write was successful (currently, always true).\n\n### `processor.pipe(stream[, options])`\n\n> **Note**: This does not pass all processed data (e.g., from loose\n> `process()` calls) to the destination stream.  There’s one process\n> created internally especially for streams.  Only data piped into\n> the processor is piped out.\n\nPipe data streamed into the processor, processed, to the destination\nstream.  Optionally also set the configuration for how the data\nis processed.  Calls [`Stream#pipe`][stream-pipe] with the given\narguments under the hood.\n\n###### Parameters\n\n*   `stream` ([`WritableStream`][writable-stream]);\n*   `options` (`Object`, optional) — Configuration for process and\n    `stream.pipe`.\n\n###### Returns\n\n[`WritableStream`][writable-stream] — The given stream.\n\n### `processor.data(key[, value])`\n\nGet or set information in an in-memory key-value store accessible to\nall phases of the process.  An example is a list of HTML elements\nwhich are self-closing (i.e., do not need a closing tag), which is\nneeded when parsing, transforming, and compiling HTML.\n\n###### Parameters\n\n*   `key` (`string`) — Identifier;\n*   `value` (`*`, optional) — Value to set.  Omit if getting `key`.\n\n###### Returns\n\n*   `processor` — If setting, the processor on which `data` is invoked;\n*   `*` — If getting, the value at `key`.\n\n###### Example\n\nThe following example show how to get and set information:\n\n```js\nvar unified = require('unified');\n\nconsole.log(unified().data('alpha', 'bravo').data('alpha'))\n```\n\nYields:\n\n```txt\nbravo\n```\n\n### `processor.abstract()`\n\nTurn a processor into an abstract processor.  Abstract processors\nare meant to be extended, and not to be configured or processed\ndirectly (as concrete processors are).\n\nOnce a processor is abstract, it cannot be made concrete again.\nBut, a new concrete processor functioning just like it can be\ncreated by invoking the processor.\n\n###### Returns\n\n`Processor` — The processor on which `abstract` is invoked.\n\n###### Example\n\nThe following example, `index.js`, shows how [**rehype**][rehype]\nprevents extensions to itself:\n\n```js\nvar unified = require('unified');\nvar parse = require('rehype-parse');\nvar stringify = require('rehype-stringify');\n\nmodule.exports = unified().use(parse).use(stringify).abstract();\n```\n\nThe below example, `a.js`, shows how that processor can be used to\ncreate a command line interface which reformats markdown passed on\n**stdin**(4) and outputs it on **stdout**(4).\n\n```js\nvar rehype = require('rehype');\n\nprocess.stdin.pipe(rehype()).pipe(process.stdout);\n```\n\nThe below example, `b.js`, shows a similar looking example which\noperates on the abstract [**rehype**][rehype] interface.  If this\nbehaviour was allowed it would result in unexpected behaviour, so\nan error is thrown.  **This is invalid**:\n\n```js\nvar rehype = require('rehype');\n\nprocess.stdin.pipe(rehype).pipe(process.stdout);\n```\n\nYields:\n\n```txt\n~/index.js:118\n      throw new Error(\n      ^\n\nError: Cannot pipe into abstract processor.\nTo make the processor concrete, invoke it: use `processor()` instead of `processor`.\n    at assertConcrete (~/index.js:118:13)\n    at Function.<anonymous> (~/index.js:135:7)\n    ...\n    at Object.<anonymous> (~/b.js:76:15)\n    ...\n```\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[travis-badge]: https://img.shields.io/travis/wooorm/unified.svg\n\n[travis]: https://travis-ci.org/wooorm/unified\n\n[codecov-badge]: https://img.shields.io/codecov/c/github/wooorm/unified.svg\n\n[codecov]: https://codecov.io/github/wooorm/unified\n\n[npm-install]: https://docs.npmjs.com/cli/install\n\n[releases]: https://github.com/wooorm/unified/releases\n\n[license]: LICENSE\n\n[author]: http://wooorm.com\n\n[rehype]: https://github.com/wooorm/rehype\n\n[remark]: https://github.com/wooorm/remark\n\n[retext]: https://github.com/wooorm/retext\n\n[hast]: https://github.com/wooorm/hast\n\n[mdast]: https://github.com/wooorm/mdast\n\n[nlcst]: https://github.com/wooorm/nlcst\n\n[unist]: https://github.com/wooorm/unist\n\n[engine]: https://github.com/wooorm/unified-engine\n\n[args]: https://github.com/wooorm/unified-args\n\n[gulp]: https://github.com/wooorm/unified-engine-gulp\n\n[atom]: https://github.com/wooorm/unified-engine-atom\n\n[remark-rehype]: https://github.com/wooorm/remark-rehype\n\n[remark-retext]: https://github.com/wooorm/remark-retext\n\n[rehype-retext]: https://github.com/wooorm/rehype-retext\n\n[unist-utilities]: https://github.com/wooorm/unist#list-of-utilities\n\n[vfile]: https://github.com/wooorm/vfile\n\n[vfile-contents]: https://github.com/wooorm/vfile#vfilecontents\n\n[vfile-utilities]: https://github.com/wooorm/vfile#related-tools\n\n[vfilemessage]: https://github.com/wooorm/vfile#vfilemessage\n\n[writable-stream]: https://nodejs.org/api/stream.html#stream_class_stream_writable_1\n\n[stream-pipe]: https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n\n[buffer]: https://nodejs.org/api/buffer.html#buffer_buffer\n\n[file]: #file\n\n[node]: #node\n\n[processor]: #processor\n\n[process]: #processorprocessfilevalue-options-done\n\n[parse]: #processorparsefilevalue-options\n\n[parser]: #processorparser\n\n[stringify]: #processorstringifynode-file-options\n\n[compiler]: #processorcompiler\n\n[use]: #processoruseplugin-options\n\n[attacher]: #function-attacherprocessor-options\n\n[transformer]: #function-transformernode-file-next\n\n[next]: #function-nexterr-tree-file\n\n[abstract]: #processorabstract\n\n[plugin]: #plugin\n\n[run-done]: #function-doneerr-node-file\n\n[process-done]: #function-doneerr-file\n\n[write]: #processorwritechunk-encoding-callback\n\n[pipe]: #processorpipestream-options\n\n[trough]: https://github.com/wooorm/trough#function-fninput-next\n",
  "readmeFilename": "readme.md",
  "remarkConfig": {
    "output": true,
    "presets": "wooorm"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wooorm/unified.git"
  },
  "scripts": {
    "build": "npm run build-md && npm run build-bundle && npm run build-mangle",
    "build-bundle": "browserify index.js -s unified > unified.js",
    "build-mangle": "esmangle unified.js > unified.min.js",
    "build-md": "remark . --quiet --frail",
    "lint": "xo",
    "test": "npm run build && npm run lint && npm run test-coverage",
    "test-api": "node test",
    "test-coverage": "nyc --reporter lcov tape test"
  },
  "version": "5.1.0",
  "xo": {
    "space": true,
    "rules": {
      "guard-for-in": "off",
      "max-lines": "off"
    },
    "ignores": [
      "unified.js"
    ]
  }
}
