{
  "_args": [
    [
      {
        "raw": "react-resizable-box@^1.8.1",
        "scope": null,
        "escapedName": "react-resizable-box",
        "name": "react-resizable-box",
        "rawSpec": "^1.8.1",
        "spec": ">=1.8.1 <2.0.0",
        "type": "range"
      },
      "/tmp/d-11748-18605-zkqma1.kxuipy14i/package.tgz"
    ]
  ],
  "_from": "react-resizable-box@>=1.8.1 <2.0.0",
  "_id": "react-resizable-box@1.8.4",
  "_inCache": true,
  "_location": "/linter-ui-default/react-resizable-box",
  "_nodeVersion": "6.2.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-resizable-box-1.8.4.tgz_1490620535673_0.5845422169659287"
  },
  "_npmUser": {
    "name": "bokuweb",
    "email": "bokuweb12@gmail.com"
  },
  "_npmVersion": "4.4.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-resizable-box@^1.8.1",
    "scope": null,
    "escapedName": "react-resizable-box",
    "name": "react-resizable-box",
    "rawSpec": "^1.8.1",
    "spec": ">=1.8.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/linter-ui-default"
  ],
  "_resolved": "https://registry.npmjs.org/react-resizable-box/-/react-resizable-box-1.8.4.tgz",
  "_shasum": "f2c63ccf38c6c3f49b2e31c9640e81ce14f8ed2f",
  "_shrinkwrap": null,
  "_spec": "react-resizable-box@^1.8.1",
  "_where": "/tmp/d-11748-18605-zkqma1.kxuipy14i/package.tgz",
  "author": {
    "name": "bokuweb"
  },
  "browserify": {
    "transform": [
      "babelify"
    ]
  },
  "bugs": {
    "url": "https://github.com/bokuweb/react-resizable-box/issues"
  },
  "dependencies": {
    "lodash.isequal": "^4.2.0"
  },
  "description": "Resizable component for React.",
  "devDependencies": {
    "babel": "6.1.18",
    "babel-cli": "6.2.0",
    "babel-core": "^6.9.0",
    "babel-eslint": "5.0.0",
    "babel-plugin-add-module-exports": "^0.1.2",
    "babel-plugin-espower": "2.0.0",
    "babel-plugin-transform-object-assign": "^6.8.0",
    "babel-polyfill": "6.7.2",
    "babel-preset-es2015": "6.3.13",
    "babel-preset-react": "6.1.18",
    "babel-preset-stage-0": "6.5.0",
    "babelify": "7.2.0",
    "browserify": "12.0.1",
    "eslint": "2.3.0",
    "eslint-config-airbnb": "6.1.0",
    "eslint-plugin-react": "4.2.0",
    "espower-babel": "3.3.0",
    "estraverse": "4.1.1",
    "estraverse-fb": "1.3.1",
    "husky": "^0.11.4",
    "karma": "^1.2.0",
    "karma-browserify": "^5.1.0",
    "karma-cli": "^1.0.1",
    "karma-fixture": "0.2.6",
    "karma-html2js-preprocessor": "0.1.0",
    "karma-mocha": "^1.1.1",
    "karma-phantomjs-launcher": "^1.0.1",
    "mocha": "2.3.3",
    "phantomjs-prebuilt": "^2.1.12",
    "power-assert": "1.1.0",
    "react": "^15.0.1",
    "react-addons-test-utils": "^15.0.1",
    "react-dom": "^15.2.0",
    "sinon": "1.17.3",
    "watchify": "3.5.0"
  },
  "directories": {},
  "dist": {
    "shasum": "f2c63ccf38c6c3f49b2e31c9640e81ce14f8ed2f",
    "tarball": "https://registry.npmjs.org/react-resizable-box/-/react-resizable-box-1.8.4.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "cfc116e25855bc33fe684a173d4b151c7b287100",
  "homepage": "https://github.com/bokuweb/react-resizable-box",
  "keywords": [
    "react",
    "resize",
    "resizable",
    "component"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "bokuweb",
      "email": "twelvelog+bokuweb@gmail.com"
    }
  ],
  "name": "react-resizable-box",
  "optionalDependencies": {},
  "readme": "# react-resizable-box\n\nResizable component for React.\n\n[![Build Status](https://img.shields.io/travis/bokuweb/react-resizable-box.svg?style=flat-square)](https://travis-ci.org/bokuweb/react-resizable-box)\n[![Version](https://img.shields.io/npm/v/react-resizable-box.svg?style=flat-square)](https://www.npmjs.com/package/react-resizable-box)\n[![npm](https://img.shields.io/npm/dm/react-resizable-box.svg?style=flat-square)]()\n[![License](https://img.shields.io/npm/l/react-resizable-box.svg?style=flat-square)](https://github.com/bokuweb/react-resizable-box#license)\n\n## Demo\n\n![screenshot](https://github.com/bokuweb/react-resizable-box/blob/master/docs/screenshot.gif?raw=true)\n   \nSee demo: [http://bokuweb.github.io/react-resizable-box/example/](http://bokuweb.github.io/react-resizable-box/)\n\n\n## Installation\n\n```sh\nnpm i react-resizable-box\n```\n\n## Overview\n\n### Basic\n\n``` javascript\n<Resizable\n  customClass=\"item\"\n  width={320}\n  height={200}\n>\n  Basic Sample\n</Resizable>\n```\n\n### With min/max width and height\n\n``` javascript\n<Resizable\n  customClass=\"item\"\n  width={320}\n  height={200}\n  minWidth={160}\n  minHeight={160}\n  maxWidth={480}\n  maxHeight={480}\n>\n  min size is 160px x 160px, max size is 480px x 480px.\n</Resizable>\n```\n\n## Props\n\n#### `width`: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n\n\nThe `width` property is used to set the width of a resizable component.   \nFor example, you can set `300`, `'300px'`, `50%`.     \nIf ommited, set `'auto'`.    \n\n\n#### `height`: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n\n\nThe `height` property is used to set the width of a resizable component.    \nFor example, you can set `300`, `'300px'`, `50%`.    \nIf ommited, set `'auto'`.    \n\n\n#### `minWidth`: PropTypes.number\n\n\nThe `minWidth` property is used to set the minimum width of a resizable component.\n\n\n#### `minHeight`: PropTypes.number\n\n\nThe `minHeight` property is used to set the minimum height of a resizable component.\n\n\n#### `maxWidth`: PropTypes.number\n\n\nThe `maxWidth` property is used to set the maximum width of a resizable component.\n\n\n#### `maxHeight`: PropTypes.number\n\n\nThe `maxheight` property is used to set the maximum height of a resizable component.\n\n\n#### `grid`: PropTypes.arrayOf(PropTypes.number)\n\n\nThe `grid` property is used to specify the increments that resizing should snap to. Defaults to `[1, 1]`.\n\n#### `lockAspectRatio`: PropTypes.bool\n\nThe `lockAspectRatio` property is used to lock aspect ratio.\nIf ommited, set `false`.\n\n\n#### `customClass`: PropTypes.string\n\n\nThe `customClass` property is used to set the custom `className` of a resizable component.\n\n\n#### `customStyle`: Proptypes.object\n\n\nThe `customStyle` property is used to set the custom `classStyle` of a resizable component.\n\n\n#### `handleStyle`: PropTypes.shape({ top: PropTypes.object, right: PropTypes.object, bottom: PropTypes.object, left: PropTypes.object, topRight: PropTypes.object, bottomRight: PropTypes.object, bottomLeft: PropTypes.object, topLeft: PropTypes.object })\n\n\nThe `handleStyle` property is used to override the style of one or more resize handles.\nOnly the axis you specify will have its handle style replaced.\nIf you specify a value for `right` it will completely replace the styles for the `right` resize handle,\nbut other handle will still use the default styles.\n\n\n#### `isResizable`: PropTypes.shape({ top: PropTypes.bool, right: PropTypes.bool, bottom: PropTypes.bool, left: PropTypes.bool, topRight: PropTypes.bool, bottomRight: PropTypes.bool, bottomLeft: PropTypes.bool, topLeft: PropTypes.bool })\n\n\nThe `isResizable` property is used to set the resizable permission of a resizable component.\n\nThe permission of `top`, `right`, `bottom`, `left`, `topRight`, `bottomRight`, `bottomLeft`, `topLeft` direction resizing.\nIf omitted, all resizer are enabled.\nIf you want to permit only right direction resizing, set `{ top:false, right:true, bottom:false, left:false, topRight:false, bottomRight:false, bottomLeft:false, topLeft:false }`. \n\n\n#### `onClick`: PropTypes.func\n\n\nCalls when resizable component clicked.\n\n\n#### `onTouchStart`: PropTypes.func\n\n\nCalls when resizable component touched.\n\n\n#### `onDoubleClick`: PropTypes.func\n\n\nCalls when resizable component double clicked.\n\n\n#### `onResizeStart`: PropTypes.func\n\n\nCalls when resizable component resize starts.\nCalls back with (`direction: string`, `styleSize: object`, `clientSize: object`, `event: object`)\n\n- direction: `top`, `right`, `bottom`, `left`, `topRight`, `bottomRight`, `bottomLeft`, and `topLeft`.\n- styleSize: `{ width, height }`\n  - this argument is {width, height} of getComputedStyle.\n- clientSize: `{ width, height }`\n  - this argument is `clientWidth` and `clientHeight`.\n- event: `mouse down event`\n\n\n#### `onResize`: PropTypes.func\n\n\nCalls when resizable component resize.\nCalls back with (`direction: string`, `styleSize: object`, `clientSize: object`, `delta: object`)\n\n- direction: `top`, `right`, `bottom`, `left`, `topRight`, `bottomRight`, `bottomLeft`, and `topLeft`.\n- styleSize: `{ width, height }`\n  - this argument is {width, height} of getComputedStyle.\n- clientSize: `{ width, height }`\n  - this argument is `clientWidth` and `clientHeight`.\n- delta: `{ width, height }`\n  - this delta width and height by resize. \n  \nFor example, when `<Resizable width={100} height={200} style={{ padding: '20px'}} onResize={...} />` mounted and resize 'right' 20px, this callback is called with `('right', { width: 120, height: 200 }, { width: 160, height: 240 }, {width: 20, height: 0})`\n\n\n#### `onResizeStop`: PropTypes.func\n\n\nCalls back with (`direction: string`, `styleSize: object`, `clientSize: object`, `delta: object`)\n\n- direction: `top`, `right`, `bottom`, `left`, `topRight`, `bottomRight`, `bottomLeft`, and `topLeft`.\n- styleSize: `{ width, height }`\n  - this argument is {width, height} of getComputedStyle.\n- clientSize: `{ width, height }`\n  - this argument is `clientWidth` and `clientHeight`.\n- delta: `{ width, height }`\n  - this delta width and height by resize. \n  \nFor example, when `<Resizable width={100} height={200} style={{ padding: '20px'}} onResize={...} />` mounted and resize 'right' 20px, this callback is called with `('right', { width: 120, height: 200 }, { width: 160, height: 240 }, {width: 20, height: 0})`\n\n#### `extendsProps`: PropTypes.object\n\nThis property is used to pass the other props to the component.\n\n\n\n\ne.g.\n\n``` javascript\nconst extendsProps = {\n  data-foo: 'foo',\n  onMouseOver: () => {},\n};\n\n<Resizable {...extendsProps} />\n```\n\n\n## method\n\n#### `updateSize(object size)`\n\nUpdate component size.\n`grid` ,`max/minWidth`, `max/minHeight` props is ignored, when this method called.\n\n- for example\n\n``` js\nclass YourComponent extends Component {\n\n  ...\n  \n  update() {\n    this.resizable.updateSize({ width: 200, height: 300 });\n  }\n  \n  render() {\n    return (\n      <Resizable ref={c => { this.resizable = c; }}>\n        example\n      </Resizable>\n    );\n  }\n\n  ...\n}\n```\n\n\n## Test\n\n``` sh\nnpm test\n```\n\n## Changelog\n\n#### v1.8.4\n\n- FIx cursor\n\n#### v1.8.3\n\n- Fix npm readme\n\n#### v1.8.2\n\n- Add index.d.ts.\n- Fix resize glitch when aspct ratio locked.\n\n#### v1.8.1\n\n- Fixing issue on resizing with touch events\n\n#### v1.8.0\n\n- Add `extendsProps` prop to other props (e.g. `data-*`, `aria-*`, and other ).\n\n#### v1.7.0\n\n- Support siver side rendering #43\n\n#### v1.6.0\n\n- Add `updateSize` method.\n\n#### v1.5.1\n\n- Add `lockAspectRatio` property.\n\n#### v1.4.3\n\n- Avoid unnecessary rendering on resizer\n\n#### v1.4.2\n\n- Fix onTouchStart bind timing to avoid re-rendering\n\n#### v1.4.1\n\n- Support preserving auto size #40 (thanks @noradaiko)\n\n#### v1.4.0\n\n- Add `grid` props to snap grid. (thanks @paulyoung)\n\n\n#### v1.3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- Add `userSelect: none` when resize get srated.\n- Add shouldComponentUpdate.\n- Add hander custom className.\n\n#### v1.2.0\n\n- Add module export plugin for `require`.\n\n#### v1.1.3\n\n- Update document.\n\n#### v1.1.2\n\n- Add size argument to resizeStart callback.\n- Fix bug\n\n#### v1.1.1\n\n- Fix delta value bug\n\n#### v1.1.0\n\n- Add delta argument to onResize and onResizeStop callback.\n\n#### v1.0.0\n\n- Rename and add resizer.\n\n#### v0.4.2\n\n- Support react v15\n- ESLint run when push  \n\n#### v0.4.1\n\n- Add mousedown event object to `onResizeStart` callback argument.\n\n#### v0.4.0\n\n- Support `'px'` and `'%'` for width and height props.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2016 @Bokuweb\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bokuweb/react-resizable-box.git"
  },
  "scripts": {
    "compile": "babel -d lib/ src/",
    "lint": "eslint react",
    "prepublish": "npm run compile",
    "prepush": "npm run lint && npm t",
    "test": "karma start",
    "watch": "watchify --extension=js -o docs/dist/bundle.js docs/src/index.js"
  },
  "version": "1.8.4"
}
